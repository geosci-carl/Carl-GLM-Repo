n_iter = 200 # Tony ran 100 # Vivek tends to do 2000 - 5000. # Start with 10 and then see what happens
lower.bounds <- c(-100,0)
upper.bounds <- c(100,100)
DEoptim.output <- DEoptim(findShape,lower.bounds,upper.bounds,control=list(NP=NP_scale*npars, itermax=n_iter, parallelType=1,
parVar = list("quantiles_2100H")),
quantiles=quantiles_2100H,
myshape=myshape
)
grid = seq(-.50,3.00,.01)
plot(grid,pnorm(grid,mean=DEoptim.output$optim$bestmem[1],sd=DEoptim.output$optim$bestmem[2]),type="l",xlab="x",ylab="CDF")
points(quantiles_2100H,c(.01,.05,.17,.50,.83,.95,.99),pch=19)
OUTPUT_norm_pars <- DEoptim.output$optim$bestmem
OUTPUT_norm_rmse <- DEoptim.output$optim$bestval
}
if (shape.lnorm){
# for normal distribution
myshape=2
## Set up DEoptim
npars=2
lower.bounds = rep(NA,npars)
upper.bounds = rep(NA,npars)
NP_scale = 11
n_iter = 300 # Tony ran 100 # Vivek tends to do 2000 - 5000. # Start with 10 and then see what happens
lower.bounds <- c(-1000,0)
upper.bounds <- c(1000,1000)
DEoptim.output <- DEoptim(findShape,lower.bounds,upper.bounds,control=list(NP=NP_scale*npars, itermax=n_iter, parallelType=1,
parVar = list("quantiles_2100H")),
quantiles=quantiles_2100H,
myshape=myshape
)
grid = seq(-.50,3.00,.01)
plot(grid,plnorm(grid,meanlog=DEoptim.output$optim$bestmem[1],sdlog=DEoptim.output$optim$bestmem[2]),type="l",xlab="x",ylab="CDF")
points(quantiles_2100H,c(.01,.05,.17,.50,.83,.95,.99),pch=19)
OUTPUT_lnorm_pars <- DEoptim.output$optim$bestmem
OUTPUT_lnorm_rmse <- DEoptim.output$optim$bestval
}
if (shape.truncnorm){
# for truncated normal distribution
myshape=3
## Set up DEoptim
npars=2
lower.bounds = rep(NA,npars)
upper.bounds = rep(NA,npars)
NP_scale = 11
n_iter = 700 # Tony ran 100 # Vivek tends to do 2000 - 5000. # Start with 10 and then see what happens
lower.bounds <- c(-4000,-1000)
upper.bounds <- c(1000,1000)
DEoptim.output <- DEoptim(findShape,lower.bounds,upper.bounds,control=list(NP=NP_scale*npars, itermax=n_iter, parallelType=1,
parVar = list("quantiles_2100H")),
quantiles=quantiles_2100H,
myshape=myshape
)
grid = seq(-.50,3.00,.01)
plot(grid,ptruncnorm(grid,a=-.25,b=Inf,mean=DEoptim.output$optim$bestmem[1],sd=DEoptim.output$optim$bestmem[2]),type="l",xlab="x",ylab="CDF")
points(quantiles_2100H,c(.01,.05,.17,.50,.83,.95,.99),pch=19)
OUTPUT_trunc_pars <- DEoptim.output$optim$bestmem
OUTPUT_trunc_rmse <- DEoptim.output$optim$bestval
}
if (shape.truncnorm){
# for truncated normal distribution
myshape=3
## Set up DEoptim
npars=2
lower.bounds = rep(NA,npars)
upper.bounds = rep(NA,npars)
NP_scale = 11
n_iter = 700 # Tony ran 100 # Vivek tends to do 2000 - 5000. # Start with 10 and then see what happens
lower.bounds <- c(-4000,-1000)
upper.bounds <- c(1000,1000)
DEoptim.output <- DEoptim(findShape,lower.bounds,upper.bounds,control=list(NP=NP_scale*npars, itermax=n_iter, parallelType=1,
parVar = list("quantiles_2100H")),
quantiles=quantiles_2100H,
myshape=myshape
)
grid = seq(-.50,3.00,.01)
plot(grid,ptruncnorm(grid,a=-.25,b=Inf,mean=DEoptim.output$optim$bestmem[1],sd=DEoptim.output$optim$bestmem[2]),type="l",xlab="x",ylab="CDF")
points(quantiles_2100H,c(.01,.05,.17,.50,.83,.95,.99),pch=19)
OUTPUT_trunc_pars <- DEoptim.output$optim$bestmem
OUTPUT_trunc_rmse <- DEoptim.output$optim$bestval
}
save.image("D:/Documents/GRAD SCHOOL/Keller Lab Group/research - local workspace/expert quantile shape/shape_sensitivity_v6.Rdata.RData")
load("D:/Documents/GRAD SCHOOL/Keller Lab Group/research - local workspace/expert quantile shape/shape_sensitivity_v6.RData")
plot(grid,plnorm(grid,meanlog=DEoptim.output$optim$bestmem[1],sdlog=DEoptim.output$optim$bestmem[2]),type="l",xlab="x",ylab="CDF")
points(quantiles_2100H,c(.01,.05,.17,.50,.83,.95,.99),pch=19)
plot(grid,plnorm(grid,meanlog=1.47,sdlog=0.444), type="l",xlab="x",ylab="CDF")
points(quantiles_2100H,c(.01,.05,.17,.50,.83,.95,.99),pch=19)
if (shape.lnorm){
# for normal distribution
myshape=2
## Set up DEoptim
npars=2
lower.bounds = rep(NA,npars)
upper.bounds = rep(NA,npars)
NP_scale = 11
n_iter = 300 # Tony ran 100 # Vivek tends to do 2000 - 5000. # Start with 10 and then see what happens
lower.bounds <- c(-1000,0)
upper.bounds <- c(1000,1000)
DEoptim.output <- DEoptim(findShape,lower.bounds,upper.bounds,control=list(NP=NP_scale*npars, itermax=n_iter, parallelType=1,
parVar = list("quantiles_2100H")),
quantiles=quantiles_2100H,
myshape=myshape
)
grid = seq(-.50,3.00,.01)
plot(grid,plnorm(grid,meanlog=DEoptim.output$optim$bestmem[1],sdlog=DEoptim.output$optim$bestmem[2]),type="l",xlab="x",ylab="CDF")
points(quantiles_2100H,c(.01,.05,.17,.50,.83,.95,.99),pch=19)
OUTPUT_lnorm_pars <- DEoptim.output$optim$bestmem
OUTPUT_lnorm_rmse <- DEoptim.output$optim$bestval
}
plot(grid,plnorm(grid,meanlog=DEoptim.output$optim$bestmem[1],sdlog=DEoptim.output$optim$bestmem[2]),type="l",xlab="x",ylab="CDF")
points(quantiles_2100H,c(.01,.05,.17,.50,.83,.95,.99),pch=19)
OUTPUT_lnorm_pars <- DEoptim.output$optim$bestmem
OUTPUT_lnorm_rmse <- DEoptim.output$optim$bestval
OUTPUT_lnorm_pars
plot(grid,plnorm(grid,meanlog=0.147,sdlog=0.444),type="l",xlab="x",ylab="CDF")
points(quantiles_2100H,c(.01,.05,.17,.50,.83,.95,.99),pch=19)
lines(grid,plnorm(grid,meanlog = -0.681,sdlog = 0.774),col="red",lwd=2)
## PRODUCE TRACE PLOTS FOR CALIBRATION
rm(list=ls())                        # Clear all previous variables
graphics.off()                       # clear plots
par(mfrow=c(2,3))
bins_US <- c(5,1.5,5,1.5,1.5,6,1.5,6,4,1.5,2,2,2)
PCPI_US <- c(28.8,21.2,21.7,20.5,21.8,30.1,31.4,18.8,37.3,20.3,24.1,20.8,39.3)
PCPI_US_mean <- mean(PCPI_US)
plot(bins_US,PCPI_US,
pch=19,
xlab="Trigger Temperature [deg C]",
ylab="Per Capita Personal Income [Thousand USD]",
col="blue",
ylim=c(0,40),
xlim=c(1.5,6),
main="US Metropolitan Areas")
abline(h=PCPI_US_mean,col="blue") #US mean
#EU
bins_EU <- c(6,6,5,5,6,6,6,6,6,6,6,6)
PCPI_EU <- c(26.1,25.9,15.4,21.8,25.9,29.4,29.6,28.9,27.6,35.5,29.8,26.8)
PCPI_EU_mean <- mean(PCPI_EU,na.rm=TRUE)
plot(bins_EU,PCPI_EU,
pch=19,
xlab="Trigger Temperature [deg C]",
ylab="Per Capita Personal Income [Thousand USD]",
col="black",
ylim=c(0,40),
xlim=c(1.5,6),
main="European Countries")
abline(h=PCPI_EU_mean,col="black")
#China
bins_China <- c(1.5,2,6,6,6)
PCPI_China <- c(13.6,13,17,23.8,27.1)
PCPI_China_mean <- mean(PCPI_China,na.rm=TRUE)
plot(bins_China,PCPI_China,
pch=19,
xlab="Trigger Temperature [deg C]",
ylab="Per Capita Personal Income [Thousand USD]",
col="red",
ylim=c(0,40),
xlim=c(1.5,6),
main="China Metropolitan Areas")
abline(h=PCPI_China_mean,col="red")
#South America
bins_SA <- c(1.5,1.5,1.5,1.5,4,2.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,2,1.5,6,6)
PCPI_SA <- c(16.3,5.3,6,11.7,2,7.4,3.9,3.7,2.9,2,1.9,2.3,2.2,.3,19.8,14.6,18.8)
PCPI_SA_mean <- mean(PCPI_SA,na.rm=TRUE)
plot(bins_SA,PCPI_SA,
pch=19,
xlab="Trigger Temperature [deg C]",
ylab="Per Capita Personal Income [Thousand USD]",
col="orange",
ylim=c(0,40),
xlim=c(1.5,6),
main="South American Metro Areas")
abline(h=PCPI_SA_mean,col="orange")
#india and Sri Lanka
bins_india <- c(4,1.5,6)
PCPI_india <- c(2.5,2.8,1.3)
PCPI_india_mean <- mean(PCPI_india,na.rm=TRUE)
plot(bins_india,PCPI_india,
pch=19,
xlab="Trigger Temperature [deg C]",
ylab="Per Capita Personal Income [Thousand USD]",
col="purple",
ylim=c(0,40),
xlim=c(1.5,6),
main="India (purple) and Sri Lanka (pink)")
abline(h=PCPI_india_mean,col="purple") # India Mean
bins_SL <- 1.5
PCPI_SL <- c(1.4)
PCPI_SL_mean <- 1.4
points(bins_SL,PCPI_SL, pch=19, col="pink")
abline(h=PCPI_SL_mean,col="pink")
# Africa
bins_africa <- c(2,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,2,2,1.5,1.5,1.5,1.5,2)
PCPI_africa <- c(5.4,4.5,2.2,1.8,6.9,1.5,2,.5,.4,.7,1.6,2.9,.46,.3,.89,.65,.3)
PCPI_africa_mean <- mean(PCPI_africa,na.rm=TRUE)
plot(bins_africa,PCPI_africa,
pch=19,
xlab="Trigger Temperature [deg C]",
ylab="Per Capita Personal Income [Thousand USD]",
col="green",
ylim=c(0,40),
xlim=c(1.5,6),
main="African Countries")
abline(h=PCPI_india_mean,col="green") # India Mean
## PRODUCE TRACE PLOTS FOR CALIBRATION
rm(list=ls())                        # Clear all previous variables
graphics.off()                       # clear plots
bins_US <- c(5,1.5,5,1.5,1.5,6,1.5,6,4,1.5,2,2,2)
PCPI_US <- c(28.8,21.2,21.7,20.5,21.8,30.1,31.4,18.8,37.3,20.3,24.1,20.8,39.3)
PCPI_US_mean <- mean(PCPI_US)
length(bins_US)
length(PCPI_US)
PCPI_US_mean <- mean(PCPI_US)
plot(bins_US,PCPI_US,
pch=19,
xlab="Trigger Temperature [deg C]",
ylab="Per Capita Personal Income [Thousand USD]",
col="blue",
ylim=c(0,40),
xlim=c(1.5,6),
main="US Metropolitan Areas")
abline(h=PCPI_US_mean,col="blue") #US mean
source('D:/Documents/GRAD SCHOOL/2 - FALL 2021/METEO 570/final project/570_Final.R', echo=TRUE)
source('D:/Documents/GRAD SCHOOL/2 - FALL 2021/METEO 570/final project/570_Final.R', echo=TRUE)
source('D:/Github Repos/570-Final-Project/570_Final.R', echo=TRUE)
source('D:/Github Repos/570-Final-Project/570_Final.R', echo=TRUE)
source('D:/Github Repos/570-Final-Project/570_Final.R', echo=TRUE)
source('D:/Github Repos/570-Final-Project/570_Final.R', echo=TRUE)
source('D:/Github Repos/570-Final-Project/570_Final.R', echo=TRUE)
source('D:/Github Repos/570-Final-Project/570_Final.R', echo=TRUE)
gc()
## grab PRECIP data ##########
data <- read.csv("SWAT Input Master Data Precipitation.csv") ## load in data
setwd("D:/Github Repos/Carl-GLM-Repo")
## grab PRECIP data ##########
data <- read.csv("SWAT Input Master Data Precipitation.csv") ## load in data
View(data)
colnames(data) <- c('precip')
View(data)
## grab PRECIP data ##########
data <- read.csv("SWAT Input Master Data Precipitation.csv") ## load in data
View(data)
gc()
# Initial repo population.
rm(list = ls())
## grab PRECIP data ##########
precip <- read.csv("SWAT Input Master Data Precipitation.csv") ## load in data
View(precip)
## grab TEMP data ##########
tempmin <- read.csv("SWAT Input Master Data Temperature - Min.csv") ## load in data
tempmax <- read.csv("SWAT Input Master Data Temperature - Max.csv") ## load in data
n = nrow(precip)
n = ncol(precip)
?seq()
sequence = seq(from=1,to=n,by=1)
for (i in sequence){
i
}
for (i in sequence){
print(i)
}
i=1
plot(tempmin[,i],precip[,i])
plot(precip[,i],tempmin[,i])
par(mfrow=c(5,9))
for (i in sequence){
plot(tempmin[,i],precip[,i])
print(i)
}
i=45
plot(tempmin[,i],precip[,i],
xlab="Temperature [deg C]",
ylab="Precipitation [mm]",
main="XYZ"
)
plot(tempmin[,i],precip[,i],
xlab="Temperature [deg C]",
ylab="Precipitation [mm]",
main="XYZ"
)
sequencetest = seq(from=1,to=18,by=1)
for (i in sequencetest){
base <- 'Location '
location <- paste(base,i,sep='')
plot(tempmin[,i],precip[,i],
xlab="Temperature [deg C]",
ylab="Precipitation [mm]",
main=location
)
}
par(mfrow=c(5,9))
for (i in sequencetest){
base <- 'Location '
location <- paste(base,i,sep='')
plot(tempmin[,i],precip[,i],
xlab="Temperature [deg C]",
ylab="Precipitation [mm]",
main=location
)
}
par(mfrow=c(5,9))
for (i in sequence){
base <- 'Location '
location <- paste(base,i,sep='')
plot(tempmin[,i],precip[,i],
xlab="Temperature [deg C]",
ylab="Precipitation [mm]",
main=location
)
}
par(mfrow=c(5,9))
for (i in sequence){
base <- 'Location '
location <- paste(base,i,sep='')
plot(tempmin[,i],precip[,i],
xlab="Temperature [deg C]",
ylab="Precipitation [mm]",
main=location
)
}
par(mfrow=c(5,9))
for (i in sequence){
base <- 'Location '
location <- paste(base,i,sep='')
plot(tempmax[,i],precip[,i],
xlab="Temperature [deg C]",
ylab="Precipitation [mm]",
main=location
)
}
?cor()
#### COV #####################################################
# Does precip covary with temperature min and max?
i=1
cov(tempmax[,i],precip[,i])
cor(tempmax[,i],precip[,i])
var(tempmax[,i],precip[,i])
#### COV #####################################################
# Does precip covary with temperature min and max?
df1 <-as.data.frame(matrix(nrow=nrow(precip),ncol=n))
#### COV #####################################################
# Does precip covary with temperature min and max?
data <-as.data.frame(matrix(nrow=nrow(precip),ncol=n))
View(data)
#### COV #####################################################
# Does precip covary with temperature min and max?
data <-as.data.frame(matrix(nrow=nrow(precip),ncol=2))
View(data)
colnames(data) <- c("Precip","Temperature Min")
View(data)
#### COV #####################################################
# Does precip covary with temperature min and max?
data <-as.data.frame(matrix(nrow=nrow(precip),ncol=2))
colnames(data) <- c("precip","tempmin")
View(data)
i
data[,1] <- precip[,i]
data[,2] <- tempmin[,i]
View(data)
#### COV #####################################################
# Does precip covary with temperature min and max?
data <-as.data.frame(matrix(nrow=nrow(precip),ncol=3))
colnames(data) <- c("precip","tempmin","tempmax")
data[,1] <- precip[,i]
data[,2] <- tempmin[,i]
data[,3] <- tempmax[,i]
View(data)
summary(data)
boxplot(precip ~ tempmin)
?lm()
lm(precip ~ tempmin, data)
?cor()
View(data)
i
corr <- cor(data$precip,data$tempmin)
corr
fit <- lm(precip ~ tempmin, data)
?abline()
base <- 'Location '
location <- paste(base,i,'; r=',corr,sep='')
base <- 'Location '
corr <- cor(data$precip,data$tempmin)
fit <- lm(precip ~ tempmin, data)
location <- paste(base,i,'; r=',corr,sep='')
plot(tempmin[,i],precip[,i],
xlab="Temperature [deg C]",
ylab="Precipitation [mm]",
main=location
)
abline(fit,
color=red)
abline(fit,
color="red"")
}
abline(fit,
color="red")
abline(fit,
color="red")
abline(fit,
col="red")
?abline()
abline(fit, col="red")
base <- 'Location '
corr <- round(cor(data$precip,data$tempmin),2)
fit <- lm(precip ~ tempmin, data)
location <- paste(base,i,'; r=',corr,sep='')
plot(tempmin[,i],precip[,i],
xlab="Temperature [deg C]",
ylab="Precipitation [mm]",
main=location
)
abline(fit, col="red")
par(mfrow=c(5,9))
for (i in sequence){
base <- 'Location '
corr <- round(cor(data$precip,data$tempmin),2)
fit <- lm(precip ~ tempmin, data)
location <- paste(base,i,'; r=',corr,sep='')
plot(tempmin[,i],precip[,i],
xlab="Temperature [deg C]",
ylab="Precipitation [mm]",
main=location
)
abline(fit, col="red")
}
#### COV #####################################################
# Does precip covary with temperature min and max?
data <-as.data.frame(matrix(nrow=nrow(precip),ncol=3))
colnames(data) <- c("precip","tempmin","tempmax")
par(mfrow=c(5,9))
for (i in sequence){
data[,1] <- precip[,i]
data[,2] <- tempmin[,i]
data[,3] <- tempmax[,i]
base <- 'Location '
corr <- round(cor(data$precip,data$tempmin),2)
fit <- lm(precip ~ tempmin, data)
location <- paste(base,i,'; r=',corr,sep='')
plot(tempmin[,i],precip[,i],
xlab="Temperature [deg C]",
ylab="Precipitation [mm]",
main=location
)
abline(fit, col="red")
}
par(mfrow=c(5,9))
for (i in sequence){
data[,1] <- precip[,i]
data[,2] <- tempmin[,i]
data[,3] <- tempmax[,i]
base <- 'Location '
corr <- round(cor(data$precip,data$tempmax),2)
fit <- lm(precip ~ tempmax, data)
location <- paste(base,i,'; r=',corr,sep='')
plot(tempmax[,i],precip[,i],
xlab="Temperature [deg C]",
ylab="Precipitation [mm]",
main=location
)
abline(fit, col="red")
}
sequence
i=21
data[,1] <- precip[,i]
data[,2] <- tempmin[,i]
data[,3] <- tempmax[,i]
base <- 'Location '
corr <- round(cor(data$precip,data$tempmax),2)
fit <- lm(precip ~ tempmax, data)
location <- paste(base,i,'; r=',corr,sep='')
corr
corr <- cor(data$precip,data$tempmax)
corr
plot(data$precip, data$tempmax)
plot(data$tempmax,data$precip)
?cor()
par(mfrow=c(5,9))
for (i in sequence){
data[,1] <- precip[,i]
data[,2] <- tempmin[,i]
data[,3] <- tempmax[,i]
base <- 'Location '
corr <- round(cor(data$precip,data$tempmax,na.rm=TRUE),2)
fit <- lm(precip ~ tempmax, data)
location <- paste(base,i,'; r=',corr,sep='')
plot(tempmax[,i],precip[,i],
xlab="Temperature [deg C]",
ylab="Precipitation [mm]",
main=location
)
abline(fit, col="red")
}
?cor()
#### SPATIAL #####################################################
# Are there correlations across stations?
data <-as.data.frame(matrix(nrow=nrow(precip),ncol=3))
colnames(data) <- c("precip","tempmin","tempmax")
data[,1] <- precip[,i]
data[,2] <- tempmin[,i]
data[,3] <- tempmax[,i]
i
n = nrow(precip) # iterate over 14975 observations
sequence = seq(from=1,to=n,by=1)
data <-as.data.frame(matrix(nrow=nrow(precip),ncol=3))
colnames(data) <- c("precip","tempmin","tempmax")
View(precip)
data <-as.data.frame(precip)
View(data)
colnames(data) <- c(seq(from=1,to=ncol(precip)),by=1)
n
ncol(precip)
n = nrow(precip) # iterate over 14975 observations
sequence = seq(from=1,to=n,by=1)
i=1
